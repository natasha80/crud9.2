{"version":3,"sources":["components/PostsContext.jsx","components/CreationForm.jsx","components/PostView.jsx","components/Post.jsx","components/PostsList.jsx","components/MainPage.jsx","components/PostsProvider.jsx","App.js","serviceWorker.js","index.js"],"names":["PostsContext","createContext","CreationForm","history","location","uploadToServer","useContext","post","content","useState","form","setForm","className","onClick","goBack","push","onSubmit","event","preventDefault","console","log","id","onChange","value","target","type","PostView","match","posts","deleteFromServer","find","o","params","moment","created","format","to","pathname","Post","props","data","PostsList","map","key","MainPage","PostsProvider","setPosts","loadFromServer","fetch","then","response","json","useEffect","Provider","headers","method","body","JSON","stringify","children","App","path","component","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae49bc9a.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst PostsContext = createContext([]);\r\n\r\nexport default PostsContext;","import React, { useState, useContext } from 'react';\r\nimport PostsContext from './PostsContext';\r\n\r\nfunction CreationForm({history, location}) {\r\n\r\n    const { uploadToServer } = useContext(PostsContext);\r\n    const { post } = location;\r\n    let content = '';\r\n    if (post) {\r\n        content = post.content;\r\n    }\r\n    const [form, setForm] = useState(content);\r\n\r\n    const handleChange = (event) => {\r\n        const {value} = event.target;\r\n        console.log(value);\r\n        setForm(value);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(form);\r\n        if (!post) {\r\n          uploadToServer({content: form});\r\n          history.push('/');\r\n        } else {\r\n          uploadToServer({id: post.id, content: form});\r\n          history.push('/');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"input_wrapper\">\r\n        <span className=\"close_btn\" onClick={() => {\r\n            post ? history.goBack() : history.push('/');\r\n        }}>&#10006;</span>\r\n        <form className=\"creation_form\" onSubmit={handleSubmit}>\r\n            <textarea onChange={handleChange}>{content}</textarea>\r\n            <button type=\"submit\">Опубликовать</button>\r\n        </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CreationForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport PostsContext from './PostsContext';\r\nimport moment from 'moment';\r\n\r\n\r\nfunction PostView({ match, history }) {\r\n    const { posts, deleteFromServer } = useContext(PostsContext);\r\n\r\n    const post = posts.find(o => o.id === match.params.id);\r\n    return (\r\n        <div className=\"post_view\">\r\n            <span className=\"close_btn\" onClick={() => {\r\n                history.push('/');\r\n            }}>&#10006;</span>\r\n            <p className=\"post_date\">Дата: {moment(post.created).format('DD.MM.YYYY HH:mm:ss')}</p>\r\n            <p className=\"post_text\">{post.content}</p>\r\n            <div className=\"post_interface\">\r\n                <span className=\"del_btn\" onClick={() => {\r\n                    deleteFromServer(post.id);\r\n                    history.push('/');\r\n                }}>Удалить</span>\r\n                <span className=\"redact_btn\"><Link className=\"post_link\" to={{\r\n                pathname: `/posts/new`,\r\n                post:  post\r\n                }}>Изменить</Link></span>    \r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostView;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nfunction Post(props) {\r\n    const { data } = props;\r\n    \r\n    return (\r\n        <div className=\"post\">\r\n            <Link className=\"post_link\" to={`/posts/${data.id}`}>\r\n                <p className=\"post_date\">Дата: {moment(data.created).format('DD.MM.YYYY HH:mm:ss')}</p>\r\n                <p className=\"post_text\">{data.content}</p>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Link, NavLink, Switch} from 'react-router-dom';\r\nimport Post from './Post';\r\nimport { useContext } from 'react';\r\nimport PostsContext from './PostsContext';\r\n\r\nconst PostsList = () => {\r\n    const { posts } = useContext(PostsContext);\r\n        return (\r\n            <div className=\"posts_list\">\r\n                {posts.map(o =>\r\n                    <Post data={o} key={o.id} />\r\n                )}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default PostsList;","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Link, NavLink} from 'react-router-dom';\r\nimport PostsList from './PostsList';\r\n\r\nfunction MainPage() {\r\n  return (\r\n    <div className=\"main_page\">\r\n        <span className=\"add_btn\"><Link className=\"post_link\" to={`/posts/new`}>Опубликовать</Link></span>\r\n        <PostsList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React, { useState, useEffect } from 'react';\r\nimport PostsContext from './PostsContext';\r\n\r\nexport default function PostsProvider(props) {\r\n    const [posts, setPosts] = useState([]);\r\n    \r\n    const loadFromServer = () => {\r\n        fetch('http://localhost:7777/posts')\r\n        .then(response => response.json())\r\n        .then(posts => {\r\n          setPosts(posts);\r\n        });\r\n    };\r\n\r\n    useEffect(loadFromServer, []);\r\n\r\n    const uploadToServer = ({ id = 0, content }) => {\r\n        fetch('http://localhost:7777/posts', {\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8',\r\n          },\r\n          method: 'POST',\r\n          body: JSON.stringify({ id, content }),\r\n        })\r\n        .then(loadFromServer);\r\n    }\r\n\r\n    const deleteFromServer = (id) => {\r\n      fetch(`http://localhost:7777/posts/${id}`, {\r\n        method: 'DELETE'\r\n      })\r\n      .then(loadFromServer);\r\n  }\r\n\r\n    return (\r\n        <PostsContext.Provider value={{posts, uploadToServer, deleteFromServer }}>\r\n            {props.children}\r\n        </PostsContext.Provider>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport CreationForm from './components/CreationForm';\r\nimport PostView from './components/PostView';\r\nimport MainPage from './components/MainPage';\r\nimport PostsProvider from './components/PostsProvider';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n\r\n      <PostsProvider>\r\n        <div className=\"App\">\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/posts/new\" component={CreationForm} />\r\n            <Route path=\"/posts/:id\" component={PostView} />\r\n            <Route path=\"/\" exact component={MainPage} />\r\n          </Switch>\r\n        </Router>  \r\n        </div>\r\n      </PostsProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}